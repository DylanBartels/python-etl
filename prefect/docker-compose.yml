# https://github.com/PrefectHQ/prefect/blob/master/src/prefect/cli/docker-compose.yml
version: "3.5"
# Features driving version requirement
# - networks.name                 3.5
# - healthcheck.start_period      2.3
# - healthcheck                   2.1

services:
  # PostgreSQL: the backing database which stores flow metadata
  postgres:
    image: "postgres:11"
    ports:
      - "127.0.0.1:${POSTGRES_HOST_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: prefect_user
      POSTGRES_PASSWORD: prefect_password
      POSTGRES_DB: prefect_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - prefect-server
    command:
      - "postgres"
      - "-c"
      - "max_connections=150"
      - "-c"
      - "max_wal_size=16384"
    healthcheck:
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 2s
    restart: always

  # Hasura: automatically generates a GraphQL schema from Postgres, provides most of the 'query' API
  hasura:
    image: "hasura/graphql-engine:v2.1.1"
    ports:
      - "127.0.0.1:${HASURA_HOST_PORT:-3000}:3000"
    command: "graphql-engine serve"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgresql://prefect_user:prefect_password@postgres:5432/prefect_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_SERVER_PORT: "3000"
      HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE: 100
      HASURA_GRAPHQL_LOG_LEVEL: "warn"
      HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE: "true"
    networks:
      - prefect-server
    healthcheck:
      test: wget -O - http://hasura:$${HASURA_GRAPHQL_SERVER_PORT}/healthz &>/dev/null || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - postgres

  # GraphQL: provides most of the 'mutation' GraphQL API
  graphql:
    image: "prefecthq/server:${PREFECT_SERVER_TAG:-latest}"
    ports:
      - "127.0.0.1:${GRAPHQL_HOST_PORT:-4201}:4201"
    command: bash -c "prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py"
    environment:
      PREFECT_SERVER__DATABASE__CONNECTION_URL: postgresql://prefect_user:prefect_password@postgres:5432/prefect_db
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret}
      PREFECT_SERVER__HASURA__HOST: hasura
      PREFECT_CORE_VERSION: ${PREFECT_CORE_VERSION:-"UNKNOWN"}
    networks:
      - prefect-server
    healthcheck:
      test: curl --fail --silent "http://graphql:4201/health" &> /dev/null || exit 1
      interval: 20s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - hasura

  # Towel: runs a collection of simple services
  towel:
    image: "prefecthq/server:${PREFECT_SERVER_TAG:-latest}"
    command: "python src/prefect_server/services/towel/__main__.py"
    environment:
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret}
      PREFECT_SERVER__HASURA__HOST: hasura
    networks:
      - prefect-server
    restart: "always"
    depends_on:
      - graphql

  # Apollo: combines the hasura and graphql schemas into a unified schema, the primary API entrypoint
  apollo:
    image: "prefecthq/apollo:${PREFECT_SERVER_TAG:-latest}"
    ports:
      - "${APOLLO_HOST_IP:-127.0.0.1}:${APOLLO_HOST_PORT:-4200}:4200"
    command: bash -c "./post-start.sh && npm run serve"
    environment:
      HASURA_API_URL: ${HASURA_API_URL:-http://hasura:3000/v1alpha1/graphql}
      PREFECT_API_URL: ${PREFECT_API_URL:-http://graphql:4201/graphql/}
      PREFECT_API_HEALTH_URL: ${PREFECT_API_HEALTH_URL:-http://graphql:4201/health}
      PREFECT_SERVER__TELEMETRY__ENABLED: ${PREFECT_SERVER__TELEMETRY__ENABLED:-false}
      GRAPHQL_SERVICE_HOST: http://graphql
      GRAPHQL_SERVICE_PORT: 4201
    networks:
      - prefect-server
    healthcheck:
      test: curl --fail --silent "http://apollo:4200/.well-known/apollo/server-health" &> /dev/null || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - graphql
      - hasura

  # UI: the user interface that provides a visual dashboard for mutating and querying metadata
  # The UI is a standalone web interface and only communicates with the Apollo GraphQL API via
  #  the host from which it is accessed (i.e. the user's browser) .
  ui:
    image: "prefecthq/ui:${PREFECT_UI_TAG:-latest}"
    ports:
      - "${UI_HOST_IP:-127.0.0.1}:${UI_HOST_PORT:-8080}:8080"
    command: "/intercept.sh"
    environment:
      PREFECT_SERVER__APOLLO_URL: ${APOLLO_URL:-http://localhost:4200/graphql}
    networks:
      - prefect-server
    healthcheck:
      test: curl --fail --silent --head "http://ui:8080/" &> /dev/null || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always
    depends_on:
      - apollo

  # Prefect agent which will be running the flow(s)
  agent:
    build:
      context: ../
      dockerfile: prefect/Dockerfile
    volumes:
      - type: bind
        source: $PWD/prefect/config.toml
        target: /root/.prefect/config.toml
        read_only: true
    environment:
      DB_USER: prefect_user
      DB_PASSWORD: prefect_password
      DB_HOST: postgres
      DB_PORT: 5432
      AWS_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: dev
      AWS_SECRET_ACCESS_KEY: dev_pass
      AWS_S3_REGION_NAME: us-east-1
      AWS_S3_BUCKET: example
    networks:
      - prefect-server
    command:
      - /bin/bash
      - -c
      - |
        prefect backend server
        prefect server create-tenant --name default --slug default
        prefect agent local start --label example-label
    restart: on-failure
    depends_on:
      apollo:
        condition: service_healthy
      graphql:
        condition: service_healthy

  # Prefect runner which will activate request the flows
  runner:
    build:
      context: ../
      dockerfile: prefect/Dockerfile
    volumes:
      - type: bind
        source: $PWD/prefect/config.toml
        target: /root/.prefect/config.toml
        read_only: true
    environment:
      DB_USER: prefect_user
      DB_PASSWORD: prefect_password
      DB_HOST: postgres
      DB_PORT: 5432
    networks:
      - prefect-server
    command:
      - /bin/bash
      - -c
      - |
        prefect create project --skip-if-exists example-project
        prefect register --project example-project -p main.py
        prefect run --name etl-example --project example-project --label example-label
    restart: on-failure
    depends_on:
      apollo:
        condition: service_healthy
      graphql:
        condition: service_healthy
      minio-create-bucket:
        condition: service_completed_successfully

  minio:
    image: minio/minio:RELEASE.2021-10-27T16-29-42Z
    ports:
      - "9000:9000"
      - "8060:8060"
    environment:
      MINIO_ROOT_USER: root_user
      MINIO_ROOT_PASSWORD: root_user_password
      MINIO_ACCESS_KEY: dev
      MINIO_SECRET_KEY: dev_pass
    networks:
      - prefect-server
    command: server /data --console-address ":8060"
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:9000/minio/health/live"]
      interval: 2s
      timeout: 0s
      retries: 5
      start_period: 2s

  minio-create-bucket:
    image: minio/mc
    networks:
      - prefect-server
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 root_user root_user_password;
      /usr/bin/mc admin info myminio;
      /usr/bin/mc mb myminio/example;
      /usr/bin/mc policy set download myminio/example;
      /usr/bin/mc admin user add myminio dev dev_pass;
      /usr/bin/mc admin policy set myminio readwrite user=dev;
      exit 0;
      "

networks:
  prefect-server:
    name: prefect-server

volumes: 
  pgdata: